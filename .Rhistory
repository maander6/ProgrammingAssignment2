demo()
qnorm(0.025)
pnorm(0.025)
q()
a<-available.packages()
head(rownames(a),3) ## Show the names of the first few packages
a
install.packages("slidify")
install.packages("slidify")
available.packages
a <- available.packages()
a
head(rownames(a),3)
install.package(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
install_from_swirl("R Programming")
library(swirl)
swirl()
5+7
x<-5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length-30)
seq(5, 10, length =30)
my_seq <- seq(5, 10, length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
bye()
q()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3,5,7])
c(x[3], x[5], x[7])
x[c(3,5,7)]
x[0]
x[300]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo =11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
q()
f <- function(x){
g <- function(y){
y+z
}
x <- 4
x+g(x)
}
z <- 10
f(3)
f <- function(x){
g <- function(y){
y+z
}
z <- 4
x+g(x)
}
f(3)
x <-1:10
if(x>5){x <- 0}
x <- 5
y <- if (x<3) {NO} else{10}
y
cube <- function(x,n){
x~3
}
cube
cube <- function(x,n){
x^3
}
cube(3)
dir
ls
ls()
dir()
cd Rprogramming
cd /Rprogramming
makeVector <- function (x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set=set, get=get, setmean=setmean, getmean=getmean)
}
cachemean <- function(x, ...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
bigVec < makeVector(1:1000)
bigVec <- makeVector(1:1000)
biggerVec <- makeVector(1:100000)
cachemean(bigVec)
cachemean(biggerVec)
dir
library
library()
cachemean(biggerVec)
x <- matrix(rexp(100),10)
x
det(x)
solve(x)
x <- matrix(rexp(10000),100)
x
det(x)
solve(x)
x <- matrix(rexp(100),10)
x
det(x)
solve(x)
solve(x)
list()
ls()
?list
?ls
?list
crazy <- function() {
x <<- 3.14
print(x)
{
print(x)
x <- 42
print(x)
}
print(x)
}
crazy
crazy()
x
a <- matrix(rnorm(1000*1000), 1000, 1000)
a1 <- makeCacheMatrix(a)
setwd("C:/Users/Mark/ProgrammingAssignment2")
a <- matrix(rnorm(1000*1000), 1000, 1000)
a1 <- makeCacheMatrix(a)
source("cachematrix.R")
a1 <- makeCacheMatrix(a)
library("reshape2", lib.loc="~/R/win-library/3.1")
library("microbenchmark", lib.loc="~/R/win-library/3.1")
tm <- microbenchmark(solve(a) cacheSolve(a1))
tm <- microbenchmark(solve(a), cacheSolve(a1), times = 50)
tm
